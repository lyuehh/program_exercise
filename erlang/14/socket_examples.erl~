-module(socket_examples).
-export([nano_get_url/0,start_nano_server/0]).

nano_get_url() ->
	nano_get_url("www.google.com").
nano_get_url(Host) ->
	{ok,Socket} = gen_tcp:connect(Host,80,[binary,{packet,0}]),
	ok = gen_tcp:send(Socket,"GET / HTTP/1.0\r\n\r\b"),
	receive_data(Socket,[]).

receive_data(Socket,Sofar) ->
	receive
		{tcp,Socket,Bin} ->
			receive_data(Socket,[Bin|Sofar]);
		{tcp_closed,Socket} ->
			list_to_binary(lists:reverse(Sofar));
		Other ->
			io:format("~s~n",[Other])
	end.

%server
start_nano_server() ->
	{ok,Listen} = gen_tcp:listen(2345,[binary,{packet,4},
			{reuseaddr,true},
			{active,true}]),
	{ok,Socket} = gen_tcp:accept(Listen),
	gen_tcp:close(Listen),
	loop(Socket).
loop(Socket) ->
	receive
		{tcp,Socket,Bin} ->
			io:format("Server received binary = ~p~n",[Bin]),
			Str = binary_to_term(Bin),
			io:format("Server (unpackd) ~p~n",[Str]),
			Reply = lib_misc:string2value(Str),
			io:format("Server replying = ~p~n",[Reply]),
			gen_tcp:send(Socket,term_to_binary(Reply)),
			loop(Socket);
		{tcp_close,Socket} ->
			io:format("Server socket closed ~n")
	end.
