1: #
2: # cgi/session.rb - session support for cgi scripts
3: #
4: # Copyright (C) 2001  Yukihiro "Matz" Matsumoto
5: # Copyright (C) 2000  Network Applied Communication Laboratory, Inc.
6: # Copyright (C) 2000  Information-technology Promotion Agency, Japan
7: #
8: # Author: Yukihiro "Matz" Matsumoto
9: #
10: # Documentation: William Webber (william@williamwebber.com)
11: #
12: # == Overview
13: #
14: # This file provides the +CGI::Session+ class, which provides session
15: # support for CGI scripts.  A session is a sequence of HTTP requests
16: # and responses linked together and associated with a single client.  
17: # Information associated with the session is stored
18: # on the server between requests.  A session id is passed between client
19: # and server with every request and response, transparently
20: # to the user.  This adds state information to the otherwise stateless
21: # HTTP request/response protocol.
22: #
时间:Thu Oct 29 22:34:22 中国标准时间 2009,源文件名:session.rb,页号:1.
23: # See the documentation to the +CGI::Session+ class for more details
24: # and examples of usage.  See cgi.rb for the +CGI+ class itself.
25: 
26: require 'cgi'
27: require 'tmpdir'
28: 
29: class CGI
30: 
31:   # Class representing an HTTP session.  See documentation for the file 
32:   # cgi/session.rb for an introduction to HTTP sessions.
33:   #
34:   # == Lifecycle
35:   #
36:   # A CGI::Session instance is created from a CGI object.  By default,
37:   # this CGI::Session instance will start a new session if none currently
38:   # exists, or continue the current session for this client if one does
39:   # exist.  The +new_session+ option can be used to either always or
40:   # never create a new session.  See #new() for more details.
41:   #
42:   # #delete() deletes a session from session storage.  It
43:   # does not however remove the session id from the client.  If the client
44:   # makes another request with the same id, the effect will be to start
时间:Thu Oct 29 22:34:22 中国标准时间 2009,源文件名:session.rb,页号:2.
45:   # a new session with the old session's id.
46:   #
47:   # == Setting and retrieving session data.
48:   #
49:   # The Session class associates data with a session as key-value pairs.
50:   # This data can be set and retrieved by indexing the Session instance 
51:   # using '[]', much the same as hashes (although other hash methods
52:   # are not supported).
53:   #
54:   # When session processing has been completed for a request, the
55:   # session should be closed using the close() method.  This will
56:   # store the session's state to persistent storage.  If you want
57:   # to store the session's state to persistent storage without
58:   # finishing session processing for this request, call the update()
59:   # method.
60:   #
61:   # == Storing session state
62:   #
63:   # The caller can specify what form of storage to use for the session's 
64:   # data with the +database_manager+ option to CGI::Session::new.  The
65:   # following storage classes are provided as part of the standard library:
66:   #
时间:Thu Oct 29 22:34:22 中国标准时间 2009,源文件名:session.rb,页号:3.
67:   # CGI::Session::FileStore:: stores data as plain text in a flat file.  Only 
68:   #                           works with String data.  This is the default 
69:   #                           storage type.
70:   # CGI::Session::MemoryStore:: stores data in an in-memory hash.  The data 
71:   #                             only persists for as long as the current ruby 
72:   #                             interpreter instance does.
73:   # CGI::Session::PStore:: stores data in Marshalled format.  Provided by
74:   #                        cgi/session/pstore.rb.  Supports data of any type, 
75:   #                        and provides file-locking and transaction support.
76:   #
77:   # Custom storage types can also be created by defining a class with 
78:   # the following methods:
79:   #
80:   #    new(session, options)
81:   #    restore  # returns hash of session data.
82:   #    update
83:   #    close
84:   #    delete
85:   #
86:   # Changing storage type mid-session does not work.  Note in particular
87:   # that by default the FileStore and PStore session data files have the
88:   # same name.  If your application switches from one to the other without
时间:Thu Oct 29 22:34:22 中国标准时间 2009,源文件名:session.rb,页号:4.
89:   # making sure that filenames will be different
90:   # and clients still have old sessions lying around in cookies, then
91:   # things will break nastily!
92:   #
93:   # == Maintaining the session id.
94:   #
95:   # Most session state is maintained on the server.  However, a session
96:   # id must be passed backwards and forwards between client and server
97:   # to maintain a reference to this session state.
98:   #
99:   # The simplest way to do this is via cookies.  The CGI::Session class
100:   # provides transparent support for session id communication via cookies
101:   # if the client has cookies enabled.
102:   # 
103:   # If the client has cookies disabled, the session id must be included
104:   # as a parameter of all requests sent by the client to the server.  The
105:   # CGI::Session class in conjunction with the CGI class will transparently
106:   # add the session id as a hidden input field to all forms generated
107:   # using the CGI#form() HTML generation method.  No built-in support is
108:   # provided for other mechanisms, such as URL re-writing.  The caller is
109:   # responsible for extracting the session id from the session_id 
110:   # attribute and manually encoding it in URLs and adding it as a hidden
时间:Thu Oct 29 22:34:22 中国标准时间 2009,源文件名:session.rb,页号:5.
111:   # input to HTML forms created by other mechanisms.  Also, session expiry
112:   # is not automatically handled.
113:   #
114:   # == Examples of use
115:   #
116:   # === Setting the user's name
117:   #
118:   #   require 'cgi'
119:   #   require 'cgi/session'
120:   #   require 'cgi/session/pstore'     # provides CGI::Session::PStore
121:   #
122:   #   cgi = CGI.new("html4")
123:   #
124:   #   session = CGI::Session.new(cgi,
125:   #       'database_manager' => CGI::Session::PStore,  # use PStore
126:   #       'session_key' => '_rb_sess_id',              # custom session key
127:   #       'session_expires' => Time.now + 30 * 60,     # 30 minute timeout 
128:   #       'prefix' => 'pstore_sid_')                   # PStore option
129:   #   if cgi.has_key?('user_name') and cgi['user_name'] != ''
130:   #       # coerce to String: cgi[] returns the 
131:   #       # string-like CGI::QueryExtension::Value
132:   #       session['user_name'] = cgi['user_name'].to_s
时间:Thu Oct 29 22:34:22 中国标准时间 2009,源文件名:session.rb,页号:6.
133:   #   elsif !session['user_name']
134:   #       session['user_name'] = "guest"
135:   #   end
136:   #   session.close
137:   #
138:   # === Creating a new session safely
139:   #
140:   #   require 'cgi'
141:   #   require 'cgi/session'
142:   #
143:   #   cgi = CGI.new("html4")
144:   #
145:   #   # We make sure to delete an old session if one exists,
146:   #   # not just to free resources, but to prevent the session 
147:   #   # from being maliciously hijacked later on.
148:   #   begin
149:   #       session = CGI::Session.new(cgi, 'new_session' => false)      
150:   #       session.delete                 
151:   #   rescue ArgumentError  # if no old session
152:   #   end
153:   #   session = CGI::Session.new(cgi, 'new_session' => true)
154:   #   session.close
时间:Thu Oct 29 22:34:22 中国标准时间 2009,源文件名:session.rb,页号:7.
155:   #
156:   class Session
157: 
158:     class NoSession < RuntimeError #:nodoc:
159:     end
160: 
161:     # The id of this session.
162:     attr_reader :session_id, :new_session
163: 
164:     def Session::callback(dbman)  #:nodoc:
165:       Proc.new{
166: 	dbman[0].close unless dbman.empty?
167:       }
168:     end
169: 
170:     # Create a new session id.
171:     #
172:     # The session id is an MD5 hash based upon the time,
173:     # a random number, and a constant string.  This routine
174:     # is used internally for automatically generated
175:     # session ids. 
176:     def create_new_id
时间:Thu Oct 29 22:34:22 中国标准时间 2009,源文件名:session.rb,页号:8.
177:       require 'digest/md5'
178:       md5 = Digest::MD5::new
179:       now = Time::now
180:       md5.update(now.to_s)
181:       md5.update(String(now.usec))
182:       md5.update(String(rand(0)))
183:       md5.update(String($$))
184:       md5.update('foobar')
185:       @new_session = true
186:       md5.hexdigest
187:     end
188:     private :create_new_id
189: 
190:     # Create a new CGI::Session object for +request+.
191:     #
192:     # +request+ is an instance of the +CGI+ class (see cgi.rb).
193:     # +option+ is a hash of options for initialising this
194:     # CGI::Session instance.  The following options are
195:     # recognised:
196:     #
197:     # session_key:: the parameter name used for the session id.
198:     #               Defaults to '_session_id'.
时间:Thu Oct 29 22:34:22 中国标准时间 2009,源文件名:session.rb,页号:9.
199:     # session_id:: the session id to use.  If not provided, then
200:     #              it is retrieved from the +session_key+ parameter
201:     #              of the request, or automatically generated for
202:     #              a new session.
203:     # new_session:: if true, force creation of a new session.  If not set, 
204:     #               a new session is only created if none currently
205:     #               exists.  If false, a new session is never created,
206:     #               and if none currently exists and the +session_id+
207:     #               option is not set, an ArgumentError is raised.
208:     # database_manager:: the name of the class providing storage facilities
209:     #                    for session state persistence.  Built-in support
210:     #                    is provided for +FileStore+ (the default),
211:     #                    +MemoryStore+, and +PStore+ (from
212:     #                    cgi/session/pstore.rb).  See the documentation for
213:     #                    these classes for more details.
214:     #
215:     # The following options are also recognised, but only apply if the
216:     # session id is stored in a cookie.
217:     #
218:     # session_expires:: the time the current session expires, as a 
219:     #                   +Time+ object.  If not set, the session will terminate
220:     #                   when the user's browser is closed.
时间:Thu Oct 29 22:34:22 中国标准时间 2009,源文件名:session.rb,页号:10.
221:     # session_domain:: the hostname domain for which this session is valid.
222:     #                  If not set, defaults to the hostname of the server.
223:     # session_secure:: if +true+, this session will only work over HTTPS.
224:     # session_path:: the path for which this session applies.  Defaults
225:     #                to the directory of the CGI script.
226:     #
227:     # +option+ is also passed on to the session storage class initialiser; see
228:     # the documentation for each session storage class for the options
229:     # they support.
230:     #                  
231:     # The retrieved or created session is automatically added to +request+
232:     # as a cookie, and also to its +output_hidden+ table, which is used
233:     # to add hidden input elements to forms.  
234:     #
235:     # *WARNING* the +output_hidden+
236:     # fields are surrounded by a <fieldset> tag in HTML 4 generation, which
237:     # is _not_ invisible on many browsers; you may wish to disable the
238:     # use of fieldsets with code similar to the following
239:     # (see http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-list/37805)
240:     #
241:     #   cgi = CGI.new("html4")
242:     #   class << cgi
时间:Thu Oct 29 22:34:22 中国标准时间 2009,源文件名:session.rb,页号:11.
243:     #       undef_method :fieldset
244:     #   end
245:     #
246:     def initialize(request, option={})
247:       @new_session = false
248:       session_key = option['session_key'] || '_session_id'
249:       session_id = option['session_id']
250:       unless session_id
251: 	if option['new_session']
252: 	  session_id = create_new_id
253: 	end
254:       end
255:       unless session_id
256: 	if request.key?(session_key)
257: 	  session_id = request[session_key]
258: 	  session_id = session_id.read if session_id.respond_to?(:read)
259: 	end
260: 	unless session_id
261: 	  session_id, = request.cookies[session_key]
262: 	end
263: 	unless session_id
264: 	  unless option.fetch('new_session', true)
时间:Thu Oct 29 22:34:22 中国标准时间 2009,源文件名:session.rb,页号:12.
265: 	    raise ArgumentError, "session_key `%s' should be supplied"%session_key
266: 	  end
267: 	  session_id = create_new_id
268: 	end
269:       end
270:       @session_id = session_id
271:       dbman = option['database_manager'] || FileStore
272:       begin
273:         @dbman = dbman::new(self, option)
274:       rescue NoSession
275:         unless option.fetch('new_session', true)
276:           raise ArgumentError, "invalid session_id `%s'"%session_id
277:         end
278:         session_id = @session_id = create_new_id
279:         retry
280:       end
281:       request.instance_eval do
282: 	@output_hidden = {session_key => session_id} unless option['no_hidden']
283: 	@output_cookies =  [
284:           Cookie::new("name" => session_key,
285: 		      "value" => session_id,
286: 		      "expires" => option['session_expires'],
时间:Thu Oct 29 22:34:22 中国标准时间 2009,源文件名:session.rb,页号:13.
287: 		      "domain" => option['session_domain'],
288: 		      "secure" => option['session_secure'],
289: 		      "path" => if option['session_path'] then
290: 				  option['session_path']
291: 		                elsif ENV["SCRIPT_NAME"] then
292: 				  File::dirname(ENV["SCRIPT_NAME"])
293: 				else
294: 				  ""
295: 				end)
296:         ] unless option['no_cookies']
297:       end
298:       @dbprot = [@dbman]
299:       ObjectSpace::define_finalizer(self, Session::callback(@dbprot))
300:     end
301: 
302:     # Retrieve the session data for key +key+.
303:     def [](key)
304:       unless @data
305: 	@data = @dbman.restore
306:       end
307:       @data[key]
308:     end
时间:Thu Oct 29 22:34:22 中国标准时间 2009,源文件名:session.rb,页号:14.
309: 
310:     # Set the session date for key +key+.
311:     def []=(key, val)
312:       unless @write_lock
313: 	@write_lock = true
314:       end
315:       unless @data
316: 	@data = @dbman.restore
317:       end
318:       @data[key] = val
319:     end
320: 
321:     # Store session data on the server.  For some session storage types,
322:     # this is a no-op.
323:     def update  
324:       @dbman.update
325:     end
326: 
327:     # Store session data on the server and close the session storage.  
328:     # For some session storage types, this is a no-op.
329:     def close
330:       @dbman.close
时间:Thu Oct 29 22:34:22 中国标准时间 2009,源文件名:session.rb,页号:15.
331:       @dbprot.clear
332:     end
333: 
334:     # Delete the session from storage.  Also closes the storage.
335:     #
336:     # Note that the session's data is _not_ automatically deleted
337:     # upon the session expiring.
338:     def delete
339:       @dbman.delete
340:       @dbprot.clear
341:     end
342: 
343:     # File-based session storage class.
344:     #
345:     # Implements session storage as a flat file of 'key=value' values.
346:     # This storage type only works directly with String values; the
347:     # user is responsible for converting other types to Strings when
348:     # storing and from Strings when retrieving.
349:     class FileStore
350:       # Create a new FileStore instance.
351:       #
352:       # This constructor is used internally by CGI::Session.  The
时间:Thu Oct 29 22:34:22 中国标准时间 2009,源文件名:session.rb,页号:16.
353:       # user does not generally need to call it directly.
354:       #
355:       # +session+ is the session for which this instance is being
356:       # created.  The session id must only contain alphanumeric
357:       # characters; automatically generated session ids observe
358:       # this requirement.
359:       # 
360:       # +option+ is a hash of options for the initialiser.  The
361:       # following options are recognised:
362:       #
363:       # tmpdir:: the directory to use for storing the FileStore
364:       #          file.  Defaults to Dir::tmpdir (generally "/tmp"
365:       #          on Unix systems).
366:       # prefix:: the prefix to add to the session id when generating
367:       #          the filename for this session's FileStore file.
368:       #          Defaults to the empty string.
369:       # suffix:: the prefix to add to the session id when generating
370:       #          the filename for this session's FileStore file.
371:       #          Defaults to the empty string.
372:       #
373:       # This session's FileStore file will be created if it does
374:       # not exist, or opened if it does.
时间:Thu Oct 29 22:34:22 中国标准时间 2009,源文件名:session.rb,页号:17.
375:       def initialize(session, option={})
376: 	dir = option['tmpdir'] || Dir::tmpdir
377:        prefix = option['prefix'] || ''
378: 	suffix = option['suffix'] || ''
379: 	id = session.session_id
380:         require 'digest/md5'
381:         md5 = Digest::MD5.hexdigest(id)[0,16]
382: 	@path = dir+"/"+prefix+md5+suffix
383: 	unless File::exist? @path
384:           unless session.new_session
385:             raise CGI::Session::NoSession, "uninitialized session"
386:           end
387: 	  @hash = {}
388: 	end
389:       end
390: 
391:       # Restore session state from the session's FileStore file.
392:       #
393:       # Returns the session state as a hash.
394:       def restore
395: 	unless @hash
396: 	  @hash = {}
时间:Thu Oct 29 22:34:22 中国标准时间 2009,源文件名:session.rb,页号:18.
397:           begin
398: 	    f = File.open(@path, 'r')
399: 	    f.flock File::LOCK_SH
400: 	    for line in f
401: 	      line.chomp!
402: 	      k, v = line.split('=',2)
403: 	      @hash[CGI::unescape(k)] = CGI::unescape(v)
404: 	    end
405:           ensure
406: 	    f.close unless f.nil?
407:           end
408: 	end
409: 	@hash
410:       end
411: 
412:       # Save session state to the session's FileStore file.
413:       def update
414: 	return unless @hash
415:         begin
416: 	  f = File.open(@path, File::CREAT|File::TRUNC|File::RDWR, 0600)
417: 	  f.flock File::LOCK_EX
418:    	  for k,v in @hash
时间:Thu Oct 29 22:34:22 中国标准时间 2009,源文件名:session.rb,页号:19.
419: 	    f.printf "%s=%s\n", CGI::escape(k), CGI::escape(String(v))
420: 	  end
421:         ensure
422:           f.close unless f.nil?
423:         end
424:       end
425: 
426:       # Update and close the session's FileStore file.
427:       def close
428: 	update
429:       end
430: 
431:       # Close and delete the session's FileStore file.
432:       def delete
433:         File::unlink @path
434:       rescue Errno::ENOENT
435:       end
436:     end
437: 
438:     # In-memory session storage class.
439:     #
440:     # Implements session storage as a global in-memory hash.  Session
时间:Thu Oct 29 22:34:22 中国标准时间 2009,源文件名:session.rb,页号:20.
441:     # data will only persist for as long as the ruby interpreter 
442:     # instance does.
443:     class MemoryStore
444:       GLOBAL_HASH_TABLE = {} #:nodoc:
445: 
446:       # Create a new MemoryStore instance.
447:       #
448:       # +session+ is the session this instance is associated with.
449:       # +option+ is a list of initialisation options.  None are
450:       # currently recognised.
451:       def initialize(session, option=nil)
452: 	@session_id = session.session_id
453:         unless GLOBAL_HASH_TABLE.key?(@session_id)
454:           unless session.new_session
455:             raise CGI::Session::NoSession, "uninitialized session"
456:           end
457:           GLOBAL_HASH_TABLE[@session_id] = {}
458:         end
459:       end
460: 
461:       # Restore session state.
462:       #
时间:Thu Oct 29 22:34:22 中国标准时间 2009,源文件名:session.rb,页号:21.
463:       # Returns session data as a hash.
464:       def restore
465: 	GLOBAL_HASH_TABLE[@session_id]
466:       end
467: 
468:       # Update session state.
469:       #
470:       # A no-op.
471:       def update
472: 	# don't need to update; hash is shared
473:       end
474: 
475:       # Close session storage.
476:       #
477:       # A no-op.
478:       def close
479: 	# don't need to close
480:       end
481: 
482:       # Delete the session state.
483:       def delete
484: 	GLOBAL_HASH_TABLE.delete(@session_id)
时间:Thu Oct 29 22:34:22 中国标准时间 2009,源文件名:session.rb,页号:22.
485:       end
486:     end
487:   end
488: end
