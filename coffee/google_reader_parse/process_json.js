// Generated by CoffeeScript 1.6.3
(function() {
  var content, e, filename, filepath, formatTime, formatTitle, fs, getContent, obj, paid2, s, starred, tpl, _, _i, _len, _ref;

  starred = require('./starred.json');

  fs = require('fs');

  _ = require('underscore');

  tpl = fs.readFileSync('./post.tpl', 'utf8');

  paid2 = function(s) {
    if ((s + '').length < 2) {
      return ('00' + s).slice(1);
    } else {
      return s;
    }
  };

  formatTime = function(t) {
    var date, hours, minutes, month, seconds, year;
    year = t.getFullYear();
    month = t.getMonth() + 1;
    date = t.getDate();
    hours = t.getHours();
    minutes = t.getMinutes();
    seconds = t.getSeconds();
    return year + '-' + paid2(month) + '-' + paid2(date) + ' ' + paid2(hours) + ':' + paid2(minutes) + ':' + paid2(seconds);
  };

  getContent = function(o) {
    if (o.content) {
      return o.content.content;
    } else if (o.summary) {
      return o.summary.content;
    } else {
      return o.alternate[0].href;
    }
  };

  formatTitle = function(s) {
    return s.replace(/[\/\s\?'"”“]/g, '-');
  };

  _ref = starred.items;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    s = _ref[_i];
    try {
      obj = {
        title: s.title,
        author: s.author,
        date: formatTime(new Date(s.updated * 1000)),
        content: getContent(s),
        link: s.alternate[0].href
      };
      filename = formatTime(new Date(s.updated * 1000)).split(' ')[0];
      filepath = './posts/' + filename + '-' + (s.title && formatTitle(s.title)) + '.markdown';
      content = _.template(tpl, obj);
      fs.writeFileSync(filepath, content);
    } catch (_error) {
      e = _error;
      console.log(e);
      console.log(2);
      process.exit(0);
    }
  }

}).call(this);
